# https://stackoverflow.com/questions/66466082/how-do-i-write-a-snakemake-input-when-not-all-jobs-successfully-output-files-fro

import os

configfile: "config.yaml"
FIELD = config['FIELD']
CUBE = str(config['CUBE'])
DATA = str(config['PATH_TO_DATA'])
SOFTWARE = str(config['PATH_TO_SOFTWARE'])
CBEAMS = str(config['PATH_TO_CBEAMS'])


beams, = glob_wildcards(DATA+"/"+FIELD+"/HI_B0{xx}_cube"+CUBE+"_spline_clean_image.fits")

wildcard_constraints:
    beams="\d+"

rule all:
    input:
        DATA+"/mos_"+FIELD+"/"+FIELD+"_beams_cube"+CUBE+".png"

def aggregate_input(wildcards):
    found_files = expand(DATA+"/"+FIELD+"/HI_B0{xx}_cube"+CUBE+"_spline_clean_image.fits", xx=beams)
    return found_files

rule make_mosaic2:
    input:
        pb = aggregate_input,
    output:
        DATA+"/mos_"+FIELD+"/"+FIELD+"_HIcube"+CUBE+"_clean_image.fits",
        DATA+"/mos_"+FIELD+"/"+FIELD+"_HIcube"+CUBE+"_clean_image.hdr",
        DATA+"/mos_"+FIELD+"/"+FIELD+"_HIcube"+CUBE+"_clean_noise.fits",
        DATA+"/mos_"+FIELD+"/"+FIELD+"_HIcube"+CUBE+"_clean_weights.fits",
    run:
        input = list(input)
        mos_params = " ".join([i.split("/")[1] for i in input if "spline_clean_image" in i])
        os.system('mosaic-queen -mc 0.1 -n '+FIELD+'_HIcube'+CUBE+'_clean -i '+FIELD+' -o mos_'+FIELD+' -t '+mos_params+' -r')
        os.system('rm -rf 'DATA+'/mos_'+FIELD+'/*imageR*')
        os.system('rm -rf 'DATA+'/mos_'+FIELD+'/*pbR*')
        os.system('rm -rf 'DATA+'/mos_'+FIELD+'/*image_fields*')

rule run_sofia2:
    input:
        DATA+"DATA+"/mos_"+FIELD+"/"+FIELD+"_HIcube"+CUBE+"_clean_image.fits",
        DATA+"DATA+"/mos_"+FIELD+"/"+FIELD+"_HIcube"+CUBE+"_image_sofiaFS_mask_bin_dil.fits"
    output:
        DATA+"DATA+"/mos_"+FIELD+"/"+FIELD+"_HIcube"+CUBE+"_clean_image_cat.txt",
        DATA+"DATA+"/mos_"+FIELD+"/"+FIELD+"_HIcube"+CUBE+"_clean_image_cat.xml",
        DATA+"DATA+"/mos_"+FIELD+"/"+FIELD+"_HIcube"+CUBE+"_clean_image_mask-2d.fits",
        DATA+"DATA+"/mos_"+FIELD+"/"+FIELD+"_HIcube"+CUBE+"_clean_image_mask.fits"
    shell:
        "/usr/bin/sofia "+SOFTWARE+"/aper_sf2/sofia_final_template.par input.data={input[0]} input.mask={input[1]}"

rule generate_full_spec:
    input:
        DATA+"/mos_"+FIELD+"/"+FIELD+"_HIcube"+CUBE+"_clean_image.fits",
        DATA+"/mos_"+FIELD+"/"+FIELD+"_HIcube"+CUBE+"_clean_image_cat.xml"
    output:
        DATA+"/mos_"+FIELD+"/specfull_cube"+CUBE+".txt"
    shell:
        "python3 "+SOFTWARE+"/aper_sf2/src/get_specfull.py -t "+FIELD+" -c "+CUBE+"; "
        "touch {output}"

rule run_sip:
    input:
        DATA+"/mos_"+FIELD+"/"+FIELD+"_HIcube"+CUBE+"_clean_image_cat.xml",
        # "mos_"+FIELD+"/"+FIELD+"_HIcube"+CUBE+"_clean_image.fits",
        DATA+"/mos_"+FIELD+"/specfull_cube"+CUBE+".txt"
    output:
        DATA+"/mos_"+FIELD+"/sip_cube"+CUBE+".txt"
    shell:
        "sofia_image_pipeline -c {input[0]} -s panstarrs 'DSS2 Blue' 'GALEX Near UV' -i 5 -m; "
        #"sofia_image_pipeline -c {input[0]} -s 'DSS2 Blue' 'GALEX Near UV' -i 5 -m; "
        "touch {output}"

rule edit_sip_figs:
    input:
        DATA+"/mos_"+FIELD+"/sip_cube"+CUBE+".txt"
    output:
        DATA+"/mos_"+FIELD+"/sip_cube"+CUBE+"_edit.txt"
    shell:
        "python3 "+SOFTWARE+"/aper_sf2/src/edit_sip_images.py -t "+FIELD+" -c "+CUBE+"; "
        "touch {output}"

rule rename_pngs:
    input:
        DATA+"/mos_" + FIELD + "/sip_cube"+CUBE+"_edit.txt"
    output:
        DATA+"/mos_" + FIELD + "/rename_cube"+CUBE+".txt"
    shell:
        "python3 "+SOFTWARE+"/aper_sf2/src/rename_combo.py -t " + FIELD + " -c "+CUBE+"; "
        "touch {output}"

rule generate_psf_stats:
    input:
        DATA+"/mos_"+FIELD+"/rename_cube"+CUBE+".txt"
    output:
        DATA+"/mos_"+FIELD+"/"+FIELD+"_beams_cube"+CUBE+".png"
    shell:
        "python3 "+SOFTWARE+"/aper_sf2/src/record_beams.py -t "+FIELD+" -c "+CUBE+"; "
        "python3 "+SOFTWARE+"/aper_sf2/src/plot_beams.py -t "+FIELD+" -c "+CUBE
